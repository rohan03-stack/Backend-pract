"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var initialState = function () { return ({
    items: [],
    nextPageToken: undefined,
    hasFinished: false,
    hasData: false,
    error: undefined,
}); };
function useInfinitePaging(settings) {
    var _a = React.useState(initialState()), state = _a[0], setState = _a[1];
    var _b = React.useState(false), isFetching = _b[0], setIsFetching = _b[1];
    var fetcher = React.useCallback(function (currentItems, fetchPageToken) {
        setIsFetching(true);
        settings
            .fetch(fetchPageToken)
            .then(function (v) {
            var noReturnedItems = !v.data || v.data.length === 0;
            var items = noReturnedItems
                ? currentItems
                : tslib_1.__spreadArrays(currentItems, v.data);
            setState({
                items: items,
                nextPageToken: v.nextPageToken,
                hasFinished: noReturnedItems || !v.nextPageToken,
                hasData: true,
                error: undefined,
            });
            setIsFetching(false);
        })
            .catch(function (error) {
            setState(tslib_1.__assign(tslib_1.__assign({}, state), { error: error }));
            setIsFetching(false);
        });
    }, [state]);
    var loadMore = React.useCallback(function () {
        if (isFetching || state.hasFinished) {
            return;
        }
        fetcher(state.items, state.nextPageToken);
    }, [fetcher, isFetching]);
    var reload = React.useCallback(function () {
        setState(initialState());
        fetcher([], settings.firstPageToken);
    }, [fetcher]);
    React.useEffect(function () {
        fetcher([], settings.firstPageToken);
    }, []);
    return {
        items: state.items,
        isFetching: isFetching,
        fetchError: state.error,
        hasData: state.hasData,
        hasFinished: state.hasFinished,
        loadMore: loadMore,
        reload: reload,
    };
}
exports.useInfinitePaging = useInfinitePaging;
