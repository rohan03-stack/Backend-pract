"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var async_1 = require("../../utilities/async");
var icon_1 = require("../display/icon");
var button_1 = require("../interaction/button");
var SimpleBurgerMenuComponent = function (_a) {
    var openButtonIcon = _a.openButtonIcon, closeButtonIcon = _a.closeButtonIcon, onChange = _a.onChange, Content = _a.content, position = _a.position, mode = _a.mode, transitionTime = _a.transitionTime, children = _a.children, hideOpenButton = _a.hideOpenButton, hideCloseButton = _a.hideCloseButton;
    var _b = React.useContext(exports.SimpleBurgerMenuContext), open = _b.open, setOpen = _b.setOpen, transitioning = _b.transitioning, setTransitioning = _b.setTransitioning;
    var _c = React.useState(0), menuWidth = _c[0], setMenuWidth = _c[1];
    var menuRef = React.useRef();
    React.useEffect(function () {
        if (onChange) {
            onChange(open ? "open" : "closed");
        }
    }, [open]);
    React.useEffect(function () {
        if (menuRef.current) {
            setMenuWidth(menuRef.current.clientWidth);
        }
    }, [menuRef]);
    var transition = React.useCallback(function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    setTransitioning(true);
                    return [4 /*yield*/, async_1.delay(transitionTime)];
                case 1:
                    _a.sent();
                    setTransitioning(false);
                    return [2 /*return*/];
            }
        });
    }); }, [setTransitioning, transitionTime]);
    React.useEffect(function () {
        transition();
    }, [open, transitionTime]);
    var slideTransform = React.useMemo(function () { return (mode === "push" ? { transform: open ? "translateX(" + (position === "left" ? menuWidth : -menuWidth) + "px)" : "translateX(0)" } : {}); }, [menuWidth, open, mode]);
    return (React.createElement(React.Fragment, null,
        React.createElement("nav", { className: "armstrong-simple-burger-menu", ref: menuRef, "data-open": open, "data-position": position, "data-mode": mode, style: { transition: transitionTime + "ms" } },
            !hideCloseButton && React.createElement(button_1.Button, { className: "armstrong-burger-menu-button close", onClick: function () { return setOpen(false); } }, closeButtonIcon && React.createElement(icon_1.Icon, { icon: closeButtonIcon })),
            React.createElement("div", { className: "armstrong-burger-content" }, Content)),
        !hideOpenButton && React.createElement(button_1.Button, { "data-position": position, className: "armstrong-burger-menu-button open", onClick: function () { return setOpen(true); } }, openButtonIcon && React.createElement(icon_1.Icon, { icon: openButtonIcon })),
        mode === "slide" && React.createElement("div", { className: "armstrong-menu-overlay", onClick: function () { return setOpen(false); }, style: { transition: transitionTime + "ms" }, "data-transition": transitioning ? open ? "in" : "out" : open ? "open" : "closed" }),
        React.createElement("div", { className: "armstrong-site-content-wrapper", style: tslib_1.__assign(tslib_1.__assign({}, slideTransform), { transition: "transform " + transitionTime + "ms" }) }, children)));
};
SimpleBurgerMenuComponent.defaultProps = {
    position: "left",
    mode: "slide",
    transitionTime: 300
};
exports.SimpleBurgerMenuContext = React.createContext(undefined);
exports.SimpleBurgerMenu = function (props) {
    var _a = React.useState(false), open = _a[0], setOpen = _a[1];
    var _b = React.useState(false), transitioning = _b[0], setTransitioning = _b[1];
    return (React.createElement(exports.SimpleBurgerMenuContext.Provider, { value: { open: open, setOpen: setOpen, transitioning: transitioning, setTransitioning: setTransitioning } },
        React.createElement(SimpleBurgerMenuComponent, tslib_1.__assign({}, props))));
};
exports.useSimpleBurgerMenu = function () {
    return React.useContext(exports.SimpleBurgerMenuContext);
};
