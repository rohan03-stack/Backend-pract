"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var classHelpers_1 = require("../../utilities/classHelpers");
var icon_1 = require("./../display/icon");
var ButtonRef = function (props, ref) {
    var onClick = props.onClick, leftIcon = props.leftIcon, rightIcon = props.rightIcon, className = props.className, rounded = props.rounded, pending = props.pending, disabled = props.disabled, type = props.type, children = props.children, attrs = tslib_1.__rest(props, ["onClick", "leftIcon", "rightIcon", "className", "rounded", "pending", "disabled", "type", "children"]);
    var buttonRef = React.useRef();
    React.useImperativeHandle(ref, function () { return ({
        focus: function () {
            if (buttonRef.current) {
                buttonRef.current.focus();
            }
        },
        blur: function () {
            if (buttonRef.current) {
                buttonRef.current.blur();
            }
        },
    }); }, [buttonRef.current]);
    var handleClick = React.useCallback(function (e) {
        if (onClick && !pending) {
            onClick(e);
        }
    }, [onClick, pending]);
    var classes = classHelpers_1.ClassHelpers.classNames("btn", className, {
        "rounded": rounded,
        "icon-button-left": leftIcon !== undefined,
        "icon-button-right": rightIcon !== undefined,
        "pending": pending,
    });
    return (React.createElement("button", tslib_1.__assign({ ref: buttonRef, disabled: pending || disabled, type: type || "button", onClick: handleClick }, attrs, { className: classes }),
        leftIcon && React.createElement(icon_1.Icon, { className: "left-icon", icon: leftIcon }),
        children,
        rightIcon && React.createElement(icon_1.Icon, { className: "right-icon", icon: rightIcon })));
};
exports.Button = React.forwardRef(ButtonRef);
